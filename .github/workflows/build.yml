# Build Workflow
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: 📦 Nested Dict Tools CI build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.12"
          # - "3.13"
        os:
          - ubuntu-latest
          # - macos-latest
          - windows-latest
        include:
          - os: ubuntu-latest
            path: ~/.cache/pip
          # - os: macos-latest
          #   path: ~/Library/Caches/pip
          - os: windows-latest
            path: ~\AppData\Local\pip\Cache
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: 🛎️ Checkout
        uses: actions/checkout@v4

      - name: 🐍 Install uv with caching
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          version: "0.5.4"
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: 💾 Setup pip cache
        uses: actions/cache@v4
        with:
          path: ${{ matrix.path }}
          key: ${{ runner.os }}-pip-${{ hashFiles('uv.lock') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 📥 Install the project
        run: |
          uv sync --all-extras --dev
          uv pip install -e .
      - name: 🏞️ Activate virtual environment
        run: |
          ORIGINAL_PATH=$PATH
          if [ "$RUNNER_OS" == "Windows" ]; then
              source .venv\\Scripts\\activate
              echo PATH=$PATH >> $GITHUB_ENV
              pip install pipx  # Problems with ruff action otherwise
          else
              source .venv/bin/activate
              echo PATH=$PATH >> $GITHUB_ENV
          fi

      - name: 🧹 Lint with ruff @astral-sh
        uses: astral-sh/ruff-action@v1
        # with:
        #   args: "format --diff"
        continue-on-error: true

      - name: 📥 Install pytest-action dependencies
        run: uv pip install pytest-md pytest-emoji
      - name: 🧪 Run pytest @pavelzw
        uses: pavelzw/pytest-action@v2
        with:
          custom-arguments: "tests -rA --cov=." # --doctest-modules
        continue-on-error: true

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Install tar on Windows
        if: runner.os == 'Windows'
        run: choco install gnuwin32-coreutils.install

      - name: ✅ Pylance type checking @jakebailey
        uses: jakebailey/pyright-action@v2
        with:
          pylance-version: latest-release
          stats: true
          # verbose: true
        continue-on-error: true
      - name: ✅ Verify public API types with Pylance @jakebailey
        uses: jakebailey/pyright-action@v2
        with:
          pylance-version: latest-release
          verify-types: nested_dict_tools
          # verbose: true
        continue-on-error: true

      - name: 🏗️ Build
        run: |
          pipx install hatch
          hatch build
